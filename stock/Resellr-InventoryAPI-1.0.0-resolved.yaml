---
openapi: 3.0.0
info:
  title: Inventory API
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/Resellr/InventoryAPI/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://api.example.com/v1
paths:
  /categories:
    get:
      tags:
      - categories
      summary: Get all categories
      parameters:
      - name: limit
        in: query
        description: Maximum number of categories to return
        required: false
        style: form
        explode: true
        schema:
          maximum: 50
          minimum: 1
          type: integer
          format: int32
      - name: offset
        in: query
        description: Number of categories to skip for pagination
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
    post:
      tags:
      - categories
      summary: Create a new category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCategory'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
  /categories/{categoryId}:
    get:
      tags:
      - categories
      summary: Get a category by ID
      parameters:
      - name: categoryId
        in: path
        description: ID of the category to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Server Error
    put:
      tags:
      - categories
      summary: Update a category by ID
      parameters:
      - name: categoryId
        in: path
        description: ID of the category to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated category object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        "200":
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        "404":
          description: Category not found
        "500":
          description: Internal Server Error
    delete:
      tags:
      - categories
      summary: Delete a category by ID
      parameters:
      - name: categoryId
        in: path
        description: ID of the category to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Category deleted successfully
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /categories/{categoryId}/products:
    get:
      tags:
      - categories
      summary: Get products by category
      parameters:
      - name: categoryId
        in: path
        description: ID of the category to filter
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: limit
        in: query
        description: Maximum number of products to return
        required: false
        style: form
        explode: true
        schema:
          maximum: 50
          minimum: 1
          type: integer
          format: int32
      - name: offset
        in: query
        description: Number of products to skip for pagination
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /products:
    get:
      tags:
      - products
      summary: Get all products
      parameters:
      - name: limit
        in: query
        description: Maximum number of products to return
        required: false
        style: form
        explode: true
        schema:
          maximum: 50
          minimum: 1
          type: integer
          format: int32
      - name: offset
        in: query
        description: Number of products to skip for pagination
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
    post:
      tags:
      - products
      summary: Create a new product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /products/{productId}:
    get:
      tags:
      - products
      summary: Get a product by ID
      parameters:
      - name: productId
        in: path
        description: ID of the product to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
    put:
      tags:
      - products
      summary: Update a product by ID
      parameters:
      - name: productId
        in: path
        description: ID of the product to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
    delete:
      tags:
      - products
      summary: Delete a product by ID
      parameters:
      - name: productId
        in: path
        description: ID of the product to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
components:
  schemas:
    Category:
      required:
      - id
      - image
      - name
      type: object
      properties:
        id:
          type: string
          description: The category ID
          format: uuid
        name:
          type: string
          description: The category name
        image:
          type: string
          description: The category image URL
    NewCategory:
      required:
      - image
      - name
      type: object
      properties:
        name:
          type: string
          description: The category name
        image:
          type: string
          description: The category image URL
    Product:
      required:
      - amount
      - categoryID
      - description
      - id
      - image
      - name
      - price
      - userID
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the product
          format: uuid
        name:
          type: string
          description: The name of the product
        categoryID:
          type: string
          description: The unique identifier of the category that the product belongs to
          format: uuid
        image:
          type: string
          description: The URL of the image associated with the product
        userID:
          type: string
          description: The unique identifier of the user who owns the product
          format: uuid
        description:
          type: string
          description: A description of the product
        price:
          minimum: 0
          type: number
          description: The price of the product
        amount:
          minimum: 1
          type: integer
          description: The amount of the product
    NewProduct:
      required:
      - amount
      - categoryID
      - description
      - id
      - image
      - name
      - price
      - userID
      type: object
      properties:
        name:
          type: string
          description: The name of the product
        categoryID:
          type: string
          description: The unique identifier of the category that the product belongs to
          format: uuid
        image:
          type: string
          description: The URL of the image associated with the product
        userID:
          type: string
          description: The unique identifier of the user who owns the product
          format: uuid
        description:
          type: string
          description: A description of the product
        price:
          minimum: 0
          type: number
          description: The price of the product
        amount:
          minimum: 1
          type: integer
          description: The amount of the product
